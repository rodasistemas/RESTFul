{
  "_from": "restify-errors",
  "_id": "restify-errors@7.0.0",
  "_inBundle": false,
  "_integrity": "sha512-2XWkUSd82tMQQY/Ufdmfp+KFfhd2bMAqN4s1EAsfj1Ir3RmyKB6i0r8wcVDJm/CR+tDfeYN8vCKgqH5yEhcF6w==",
  "_location": "/restify-errors",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "restify-errors",
    "fetchSpec": "latest",
    "name": "restify-errors",
    "raw": "restify-errors",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/restify"
  ],
  "_resolved": "https://registry.npmjs.org/restify-errors/-/restify-errors-7.0.0.tgz",
  "_shasum": "eeb6f41e783771d376fe1cfe7d87b240b309e6a2",
  "_shrinkwrap": null,
  "_spec": "restify-errors",
  "_where": "C:\\Users\\Rodrigo\\nodejs\\restful\\Node_Mysql",
  "author": {
    "email": "donutespresso@gmail.com",
    "name": "Alex Liu"
  },
  "bugs": {
    "url": "https://github.com/restify/errors/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Alex Liu"
    },
    {
      "name": "Gergely Nemeth"
    },
    {
      "name": "Mark Cavage"
    }
  ],
  "dependencies": {
    "assert-plus": "^1.0.0",
    "lodash": "^4.17.4",
    "safe-json-stringify": "^1.0.4",
    "verror": "^1.10.0"
  },
  "deprecated": false,
  "description": "Collection of Error objects shared across restify components.",
  "devDependencies": {
    "bunyan": "^1.8.10",
    "chai": "^4.0.2",
    "coveralls": "^3.0.0",
    "eslint": "^4.1.1",
    "istanbul": "^0.4.5",
    "mkdirp": "^0.5.1",
    "mocha": "^5.0.1",
    "nsp": "^3.2.1",
    "nsp-preprocessor-yarn": "^1.0.1",
    "restify": "^6.3.4",
    "restify-clients": "^1.5.0"
  },
  "files": [
    "lib"
  ],
  "homepage": "http://www.restify.com",
  "keywords": [
    "custom errors",
    "errors",
    "http errors",
    "http status code",
    "inherit errors",
    "rest errors",
    "restify",
    "restify-errors"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "restify-errors",
  "optionalDependencies": {
    "safe-json-stringify": "^1.0.4"
  },
  "readme": "# restify-errors\n\n[![NPM Version](https://img.shields.io/npm/v/restify-errors.svg)](https://npmjs.org/package/restify-errors)\n[![Build Status](https://travis-ci.org/restify/errors.svg?branch=master)](https://travis-ci.org/restify/errors)\n[![Coverage Status](https://coveralls.io/repos/restify/errors/badge.svg?branch=master)](https://coveralls.io/r/restify/errors?branch=master)\n[![Dependency Status](https://david-dm.org/restify/errors.svg)](https://david-dm.org/restify/errors)\n[![devDependency Status](https://david-dm.org/restify/errors/dev-status.svg)](https://david-dm.org/restify/errors#info=devDependencies)\n[![bitHound Score](https://www.bithound.io/github/restify/errors/badges/score.svg)](https://www.bithound.io/github/restify/errors/master)\n\n> A collection of HTTP and REST Error constructors.\n\nThis module ships with a set of constructors that can be used to new up Error\nobjects with default status codes.\n\nThe module ships with the following HttpErrors:\n\n* 400 BadRequestError\n* 401 UnauthorizedError\n* 402 PaymentRequiredError\n* 403 ForbiddenError\n* 404 NotFoundError\n* 405 MethodNotAllowedError\n* 406 NotAcceptableError\n* 407 ProxyAuthenticationRequiredError\n* 408 RequestTimeoutError\n* 409 ConflictError\n* 410 GoneError\n* 411 LengthRequiredError\n* 412 PreconditionFailedError\n* 413 RequestEntityTooLargeError\n* 414 RequesturiTooLargeError\n* 415 UnsupportedMediaTypeError\n* 416 RangeNotSatisfiableError (For Node >= 4 & iojs >= 3)\n* 416 RequestedRangeNotSatisfiableError (For Node 0.x & iojs < 3)\n* 417 ExpectationFailedError\n* 418 ImATeapotError\n* 422 UnprocessableEntityError\n* 423 LockedError\n* 424 FailedDependencyError\n* 425 UnorderedCollectionError\n* 426 UpgradeRequiredError\n* 428 PreconditionRequiredError\n* 429 TooManyRequestsError\n* 431 RequestHeaderFieldsTooLargeError\n* 500 InternalServerError\n* 501 NotImplementedError\n* 502 BadGatewayError\n* 503 ServiceUnavailableError\n* 504 GatewayTimeoutError\n* 505 HttpVersionNotSupportedError\n* 506 VariantAlsoNegotiatesError\n* 507 InsufficientStorageError\n* 509 BandwidthLimitExceededError\n* 510 NotExtendedError\n* 511 NetworkAuthenticationRequiredError\n\nand the following RestErrors:\n\n* 400 BadDigestError\n* 405 BadMethodError\n* 500 InternalError\n* 409 InvalidArgumentError\n* 400 InvalidContentError\n* 401 InvalidCredentialsError\n* 400 InvalidHeaderError\n* 400 InvalidVersionError\n* 409 MissingParameterError\n* 403 NotAuthorizedError\n* 412 PreconditionFailedError\n* 400 RequestExpiredError\n* 429 RequestThrottledError\n* 404 ResourceNotFoundError\n* 406 WrongAcceptError\n\nSome of the status codes overlap, since applications can choose the most\napplicable error type and status code for a given scenario. Should your given\nscenario require something more customized, the Error objects can be customized\nwith an options object.\n\n## Getting Started\n\nInstall the module with: `npm install restify-errors`\n\nFor TypeScript type definitions: `npm install @types/restify-errors`\n\n## Usage\n\n### Migration from 5.x to 6.x\n\nAs of 6.x this module is now a thin wrapper over the\n[VError](https://github.com/davepacheco/node-verror) module. Every Error\nconstructor exposed by this module inherits from VError, which means the\nconstructor signatures are now also identical to VError.\n\nAll VError static methods are also re-exported on the restify-errors export\nobject. For all intents and purposes, you should treat this library as an\nextension of VError, with a list of built in constructors and sugar functions.\n\nThe primary difference between the old 5.x and 6.x API is a reshuffling of the\noption names and where they are provided. In 5.x:\n\n```js\nconst err = new errors.InternalServerError(priorErr, {\n    message: 'boom!',\n    context: { foo: 'bar' }\n});\n```\n\nIn 6.x:\n\n```js\nconst err = new errors.InternalServerError({\n    cause: priorErr,\n    info: { foo: 'bar' }\n}, 'boom!');\n```\n\n### Context/Info object\nIn 5.x, the `.context` property was used to store and capture context about the\nscenario causing the error. This concept is still supported, but now uses\nVError's info object to achieve the same thing. As it uses the VError APIs, all\nyou have to now is pass `info` instead of `context` when creating an Error.\n\nFor migration purposes, accessing the info object via `.context` will be\nsupported through 6.x, and the serializer will also continue to support it.\nBoth may be deprecated in future versions. To access the info object, you can\nuse the VError static method `.info()`, which is re-exported on the\nrestify-errors exports:\n\n```js\nvar errors = require('restify-errors');\nvar verror = require('verror');\n\nvar err = new errors.InternalServerError({\n    info: {\n        foo: 'bar'\n    }\n});\nerrors.info(err);  // => { foo: 'bar' }\nverror.info(err);  // => { foo: 'bar' }\n```\n\nNote that using verror directly also works, since all Error objects created by\nthis library inherit from VError.\n\n### Custom constructors\n\nIn 5.x, using the `makeConstructor` class would add the constructor itself to\nrestify-error's module.exports object. This was problematic in complex\napplications, where custom Error constructors could be shared across multiple\nmodules in multiple contexts.\n\nAs a result, in 6.x, custom constructors are no longer stored on the\nmodule.exports object, and it is the user's responsibility to retain a\nreference to those custom constructors.\n\n\n### Creating Errors\n\nIn your application, create errors by using the constructors:\n\n```js\nvar errors = require('restify-errors');\n\nserver.get('/foo', function(req, res, next) {\n\n    if (!req.query.foo) {\n        return next(new errors.BadRequestError());\n    }\n\n    res.send(200, 'ok!');\n    return next();\n});\n```\n\n### Checking Error types\n\nYou can easily do instance checks against the Error objects:\n\n```js\nfunction redirectIfErr(req, res, next) {\n    var err = req.data.error;\n    if (err) {\n        if (err instanceof errors.InternalServerError) {\n            next(err);\n        } else if (err instanceof errors.NotFoundError) {\n            res.redirect('/NotFound', next);\n        }\n    }\n}\n```\n\nYou can also check against the `.code` or `.name` properties in case there are\nmultiple copies of restify-error in your application process:\n\n```js\nfunction redirectIfErr(req, res, next) {\n    var err = req.data.error;\n    if (err) {\n        if (err.name === 'InternalServerError' ||\n        err.code === 'InternalServer') {\n            next(err);\n        } else if (err instanceof errors.NotFoundError) {\n            res.redirect('/NotFound', next);\n        }\n    }\n}\n```\n\n### Serializing Errors\n\nAll Error objects in this module ship with both a `toString()` and `toJSON()`\nmethods. Restify uses these methods to \"render\" errors when they are passed to\n`res.send()`:\n\n```js\nfunction render(req, res, next) {\n    res.send(new errors.InternalServerError());\n    return next();\n}\n\n// => restify will render an application/json response with an http 500:\n// {\n//     code: 'InternalServerError',\n//     message: ''\n// }\n```\n\nYou can override either of these methods to customize the serialization of an\nerror.\n\n### Customizing Errors\n\nIf you'd like to change the status code or message of a built-in Error, you can\npass an options object to the constructor:\n\n```js\nfunction render(req, res, next) {\n    var myErr = new errors.InvalidVersionError({\n        statusCode: 409\n    }, 'Version not supported with current query params');\n\n    res.send(myErr);\n    return next();\n}\n\n// => even though InvalidVersionError has a built-in status code of 400, it\n//    has been customized with a 409 status code. restify will now render an\n//    application/json response with an http 409:\n// {\n//     code: 'InvalidVersionError',\n//     message: 'Version not supported with current query params'\n// }\n```\n\n### Passing in prior errors (causes)\n\nLike [WError](https://github.com/davepacheco/node-verror), all constructors\naccept an Error object as the first argument to build rich Error objects and\nstack traces. Assume a previous file lookup failed and an error was passed on:\n\n```js\nfunction wrapError(req, res, next) {\n\n    if (req.error) {\n        var myErr = new errors.InternalServerError(req.error, 'bad times!');\n        return next(myErr);\n    }\n    return next();\n}\n```\n\nThis will allow Error objects to maintain context from previous errors, giving\nyou full visibility into what caused an underlying issue:\n\n```js\nconsole.log(myErr.message);\n// => 'bad times!'\n\nconsole.log(myErr.toString());\n// => InternalServerError: bad times!; caused by Error: file lookup failed!\n\n// if you're using Bunyan, you'll get rich stack traces:\nbunyanLogger.info(myErr);\n\nInternalServerError: bad times!\n    at Object.<anonymous> (/Users/restify/test.js:30:16)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\nCaused by: Error: file lookup failed!\n    at Object.<anonymous> (/Users/restify/test.js:29:15)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\n```\n\n### Bunyan/Pino support\n\nSince errors created via restify-errors inherit from VError, you'll get out of\nthe box support via bunyan's standard serializers. If you are using the\n`info` property, you can use the serializer shipped with restify-errors:\n\n```js\nvar bunyan = require('bunyan');\nvar restifyErrors = require('restify-errors');\n\nvar log = bunyan.createLogger({\n    name: 'myLogger',\n    serializers: {\n        err: restifyErrors.bunyanSerializer\n    }\n});\n\nvar err = new restifyErrors.InternalServerError({\n    info: {\n        foo: 'bar',\n        bar: 1\n    }\n}, 'cannot service this request');\n\nlog.error(err, 'oh noes');\n```\n\n```sh\n[2016-08-31T22:27:13.117Z] ERROR: log/51633 on laptop: oh noes (err.code=InternalServer)\n    InternalServerError: cannot service this request! (foo=\"bar\", bar=1)\n        at Object.<anonymous> (/restify/test.js:11:11)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:974:3\n```\n\nYou can, of course, combine this with the standard set of serializers that\nbunyan ships with. VError's MultiError is also supported:\n\n```js\nvar underlyingErr = new Error('boom');\nvar multiErr = new verror.MultiError([\n    new Error('boom'),\n    new restifyErrors.InternalServerError({\n        cause: underlyingErr,\n        info: {\n            foo: 'bar',\n            baz: 1\n        }\n    }, 'wrapped')\n]);\n\nlog.error(multiErr, 'oh noes');\n```\n\n```\n[2016-08-31T22:48:43.244Z] ERROR: logger/55311 on laptop: oh noes\n    MultiError 1 of 2: Error: boom\n        at Object.<anonymous> (/restify/test.js:16:5)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:974:3\n    MultiError 2 of 2: InternalServerError: wrapped (foo=\"bar\", baz=1)\n        at Object.<anonymous> (/restify/test.js:17:5)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:974:3\n    Caused by: Error: boom\n        at Object.<anonymous> (/restify/test.js:14:21)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:974:3\n```\n\nFor more information about building rich errors, check out\n[VError](https://github.com/davepacheco/node-verror).\n\n\n#### Customizing the serializer\n\nThe serializer can also be customized. The serializer currently supports\nthe following options:\n\n* `options.topLevelFields` {Boolean} - if true, serializes all top level fields\n found on the error object, minus \"known\" Error/VError fields. This can be\n useful if errors are created in dependencies that don't use VError or\n restify-errors to maintain context in an independent object.\n\nFor example:\n\n```js\nvar bunyan = require('bunyan');\nvar restifyErrors = require('restify-errors');\n\nvar log = bunyan.createLogger({\n    name: 'myLogger',\n    serializers: restifyErrors.bunyanSerializer.create({\n        topLevelFields: true\n    })\n});\n\nvar err = new Error('pull!');\nerr.espresso = 'normale';\n\nlog.error(err, 'oh noes!');\n```\n\n```sh\n[2018-05-22T01:32:25.164Z] ERROR: myLogger/61085 on laptop: oh noes!\n    Error: pull! (espresso=\"normale\")\n        at Object.<anonymous> (/restify/serializer.js:11:11)\n        at Module._compile (module.js:577:32)\n        at Object.Module._extensions..js (module.js:586:10)\n        at Module.load (module.js:494:32)\n        at tryModuleLoad (module.js:453:12)\n        at Function.Module._load (module.js:445:3)\n        at Module.runMain (module.js:611:10)\n        at run (bootstrap_node.js:387:7)\n        at startup (bootstrap_node.js:153:9)\n```\n\n\n\n\n### Subclassing Errors\n\nYou can also create your own Error subclasses by using the provided\n`makeConstructor()` method.\n\n```js\nerrors.makeConstructor('ExecutionError', {\n    statusCode: 406,\n    failureType: 'motion',\n    message: 'my default message'\n});\nvar myErr = new errors.ExecutionError('bad joystick input!');\n\nconsole.log(myErr instanceof ExecutionError);\n// => true\n\nconsole.log(myErr.message);\n// => 'ExecutionError: bad joystick input!'\n\nconsole.log(myErr.failureType);\n// => 'motion'\n\nconsole.log(myErr.statusCode);\n// => 406\n\nconsole.log(myErr.stack);\n\nExecutionError: bad joystick input!\n    at Object.<anonymous> (/Users/restify/test.js:30:16)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\n```\n\n\n## API\n\nAll Error constructors are variadic and accept the following signatures, which\nare identical to the\n[VError and WError](https://github.com/davepacheoco/node-verror) signatures.\n\n### new Error(sprintf_args...)\n### new Error(priorErr [, sprintf_args...])\n### new Error(options [, sprinf_args...])\n\nrestify-errors adds additional options for the final signature:\n\n* `options.restCode` {Number} - a description code for your Error. This is used\nby restify to render an error when it is directly passed to `res.send()`. By\ndefault, it is the name of your error constructor (e.g., the restCode for a\nBadDigestError is BadDigest).\n* `options.statusCode` {Number} - an http status code\n* `options.toJSON` {Function} - override the default `toJSON()` method\n* `options.toString` {Function} - override the default `toString()` method\n\n### makeConstructor(name [, defaults])\n\nCreates a custom Error constructor, adds it to the existing exports object.\n\n* `name` {String} - the name of your Error\n* `defaults` {Object} - an object of default values that will added to the\nprototype. It is possible to override the default values for `restCode`,\n`statusCode`, `toString()` and `toJSON()`.\n\n**Returns:** {Constructor}\n\n### makeErrFromCode(statusCode [, args...])\n\nCreate an Error object using an http status code. This uses `http` module's\n`STATUS_CODES` to do the status code lookup. Thus, this convenience method\nis useful only for creating HttpErrors, and not RestErrors.\n\n* `statusCode` {Number} - an http status code\n* `args` - arguments to be passed on to the constructor\n\n**Returns:** {Object} an Error object\n\n\n## Contributing\n\nAdd unit tests for any new or changed functionality. Ensure that lint and style\nchecks pass.\n\nTo start contributing, install the git pre-push hooks:\n\n```sh\nmake githooks\n```\n\nBefore committing, run the prepush hook:\n\n```sh\nmake prepush\n```\n\nIf you have style errors, you can auto fix whitespace issues by running:\n\n```sh\nmake codestyle-fix\n```\n\n## License\n\nCopyright (c) 2018 Alex Liu\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/restify/errors.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "7.0.0"
}
